<!-- XMS PowerMatch Search Configuration -->



-<requestHandler class="solr.SearchHandler" name="/powermatch">


-<lst name="defaults">

<!-- ================= Client (Default) Options ================= -->


<!-- Output Options -->
<str name="echoParams">explicit</str>
<str name="indent">false</str>
<int name="rows">25</int>
<str name="wt">json</str>

Description: Provides output to response and allows all parameters
included in this request to be implemented by the request handler configuration.

<!-- Term Vector Options -->
<bool name="tv">false</bool>
<bool name="tv.tf">true</bool>

Decription: Allows turn-on of extra information when requested. However, If "true" make "false" to prevent
retrieval of unneccessary information. The frequency of the document will return
information per terms within the document.

<!-- Hit Highlight Options -->
<bool name="hl">true</bool>
<bool name="hl.requireFieldMatch">true</bool>
<bool name="hl.useFastVectorHighlighter">true</bool>
<str name="hl.boundaryScanner">breakIterator</str>
<str name="hl.snippets">10</str>
<str name="hl.fragsize">100</str>
<str name="hl.q">{!edismax qf=$highlight_qf ps=1 v=$all_search_terms}</str>
<str name="hl.fl">
_skills_
_text_
</str>
<str name="highlight_qf">
_skills_
_text_
</str>

Description: enables highlighted snippets to generate in the query response. The above paremeters
can be set as defaults or values that be changed in the request handler (Confluence)
Please Note: Blank or missing values will default and disable highlighting.


<!-- Faceting -->
<bool name="facet">false</bool>
<str name="facet.limit">15</str>
<str name="facet.field">_skills-original_</str>
<str name="facet.field">_std-job-titles-original_</str>
<str name="facet.field">_act-job-titles-original_</str>
<str name="facet.field">CanWorkOnSite_b</str>
<str name="facet.field">Industry_s</str>
<str name="facet.field">Networks_ss</str>
<str name="facet.field">cp_PaymentPreferences_ss</str>
<str name="facet.field">cp_LocationState_s</str>
<str name="facet.field">cp_LocationCity_s</str>
<str name="facet.field">cp_LocationCountryCode_s</str>
<str name="facet.range">DesiredRate_tf</str>
<str name="f.DesiredRate_tf.facet.range.start">0.0</str>
<str name="f.DesiredRate_tf.facet.range.end">1000.0</str>
<str name="f.DesiredRate_tf.facet.range.gap">10.0</str>
<str name="facet.mincount">1</str>

Description: Allows configuration of a specified field that has the ability to
iterate over each term within a designated field. Specification of a minimum of
 one field name is required.

<!-- Order by Options (JRAL) -->
<str name="sort">
score DESC,
$fx_pm_rate DESC,
$fx_pm_availability DESC,
$fx_pm_location DESC
</str>

VIEW JP'S DOC FOR POWERMATCH BREAKDOWN
De


<!-- Return Fields (Like SQL SELECT fields) -->
<str name="fl">
ProfileId:id
RelevancyScore:score
PowerMatchRateScore:$fx_pm_rate
PowerMatchLocationScore:$fx_pm_location
PowerMatchAvailabilityScore:$fx_pm_availability
</str>

Description: Set of methods used for updating and deleting entries in an existing
Solr Server that consist of "rate", "location", "availability". Rate finish these
using the word doc of the PowerMatch breakdown.

<!-- ================= Client (Default) Parameters ================= -->


<!-- Query Parameters: Job Fitness Variables -->
<str name="arg_min_exp_skills"/>
<str name="arg_low_exp_skills"/>
<str name="arg_med_exp_skills"/>
<str name="arg_high_exp_skills"/>
<str name="arg_max_exp_skills"/>
<str name="arg_std_job_title"/>

Description: Set of methods used for updating and deleting entries in an existing
Solr Server that PowerMatch profile skills of the Professional to the opportunity
based upon experience and skill-set.

<!-- Query Parameters: Location Variables -->
<str name="arg_latitude">0</str>
<str name="arg_longitude">0</str>
<int name="arg_max_allowed_km">80</int>

Description: Set of methods using SolrQuerySyntax to search the Professional's
 ProfileId job summaries, educations for opportunity skills and keywords.

<!-- Query Parameters: Rate Variables -->
<str name="arg_rate">0</str>

Description:Set of methods using Solr the preferred rate paid for the Professional
which is the minimum rate the buyer to offer.

<!-- Query Parameters: Availability Variables -->
<str name="arg_start_date">1901-01-01T00:00:00Z</str>
<str name="arg_end_date">1901-01-01T00:00:00Z</str>

Description: Set of methods used to determine date of Availability of Professional
Note: The Availability score is capped at 100% and cannot be lower than 0%

<!-- Query Parameters: User Search -->
<str name="arg_user_search"/>
</lst>

Description: Default method for professional/user Parameters by searching full
text ProfileId score.

-<lst name="appends">
<!-- Filter Options (like SQL WHERE Clause) -->
<str name="fq">IsActive_b:true</str>
<str name="fq">{!geofilt pt=${>:${arg_latitude}},${>:${arg_longitude}} sfield=LocationLatLon_p d=${>:${arg_max_allowed_km}}} </str>
</lst>

Description: Set of methods that apply Filter Query search results based upon the
search criteria.

-<lst name="invariants">
<!-- ================= Primay Query ================= -->
<!-- These are all combined user search terms -->
<str name="all_search_terms">
${>:${arg_min_exp_skills}}
${>:${arg_low_exp_skills}}
${>:${arg_med_exp_skills}}
${>:${arg_high_exp_skills}}
${>:${arg_max_exp_skills}}
</str>

Description: Set of values used to determine the level rate for qualifying
Professional.

<!-- Skill Search Fields with Boosts -->
-<str name="min_skill_exp_qf">
<!-- Other -->
Skills_skl
_text_
<!-- Education -->
MinExperienceEducationSkills_skl^5
LowExperienceEducationSkills_skl^4
MediumExperienceEducationSkills_skl^3
HighExperienceEducationSkills_skl^2
MaxExperienceEducationSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Education Summary based upon profile.

<!-- Certificate -->
MinExperienceCertificateSkills_skl^5
LowExperienceCertificateSkills_skl^4
MediumExperienceCertificateSkills_skl^3
HighExperienceCertificateSkills_skl^2
MaxExperienceCertificateSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary.

<!-- Position -->
MinExperiencePositionSkills_skl^5
LowExperiencePositionSkills_skl^4
MediumExperiencePositionSkills_skl^3
HighExperiencePositionSkills_skl^2
MaxExperiencePositionSkills_skl^1
</str>
-<str name="low_skill_exp_qf">
<!-- Other -->
Skills_skl
_text_

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary.

<!-- Education -->
MinExperienceEducationSkills_skl^4
LowExperienceEducationSkills_skl^5
MediumExperienceEducationSkills_skl^3
HighExperienceEducationSkills_skl^2
MaxExperienceEducationSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Education Summary.

 <!-- Certificate -->
MinExperienceCertificateSkills_skl^4
LowExperienceCertificateSkills_skl^5
MediumExperienceCertificateSkills_skl^3
HighExperienceCertificateSkills_skl^2
MaxExperienceCertificateSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary.

<!-- Position -->
MinExperiencePositionSkills_skl^4
LowExperiencePositionSkills_skl^5
MediumExperiencePositionSkills_skl^3
HighExperiencePositionSkills_skl^2
MaxExperiencePositionSkills_skl^1
</str>
-<str name="med_skill_exp_qf">
<!-- Other -->
Skills_skl
 _text_

 Description: Set of values implemented to determine level of qualifying skill-set
 of Professional by using Previous Position Summary.

 <!-- Education -->
MinExperienceEducationSkills_skl^1
LowExperienceEducationSkills_skl^2
MediumExperienceEducationSkills_skl^3
HighExperienceEducationSkills_skl^2
MaxExperienceEducationSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Previous Education Summary

<!-- Certificate -->
MinExperienceCertificateSkills_skl^1
LowExperienceCertificateSkills_skl^2
MediumExperienceCertificateSkills_skl^3
HighExperienceCertificateSkills_skl^2
MaxExperienceCertificateSkills_skl^1

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary

<!-- Position -->
MinExperiencePositionSkills_skl^1
LowExperiencePositionSkills_skl^2
MediumExperiencePositionSkills_skl^3
HighExperiencePositionSkills_skl^2
MaxExperiencePositionSkills_skl^1
</str>
-<str name="high_skill_exp_qf">
<!-- Other -->
Skills_skl
_text_

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Previous Position Summary

<!-- Education -->
MinExperienceEducationSkills_skl^1
LowExperienceEducationSkills_skl^2
MediumExperienceEducationSkills_skl^3
HighExperienceEducationSkills_skl^5
MaxExperienceEducationSkills_skl^4

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Education Summary

<!-- Certificate -->
MinExperienceCertificateSkills_skl^1
LowExperienceCertificateSkills_skl^2
MediumExperienceCertificateSkills_skl^3
HighExperienceCertificateSkills_skl^5
MaxExperienceCertificateSkills_skl^4

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary

<!-- Position -->
MinExperiencePositionSkills_skl^1
LowExperiencePositionSkills_skl^2
MediumExperiencePositionSkills_skl^3
HighExperiencePositionSkills_skl^5
MaxExperiencePositionSkills_skl^4
</str>
-<str name="max_skill_exp_qf">
<!-- Other -->
Skills_skl
 _text_

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Previous Position Summary

<!-- Education -->
MinExperienceEducationSkills_skl^1
LowExperienceEducationSkills_skl^2
MediumExperienceEducationSkills_skl^3
HighExperienceEducationSkills_skl^4
MaxExperienceEducationSkills_skl^5

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Education Summary

<!-- Certificate -->
MinExperienceCertificateSkills_skl^1
LowExperienceCertificateSkills_skl^2
MediumExperienceCertificateSkills_skl^3
HighExperienceCertificateSkills_skl^4
MaxExperienceCertificateSkills_skl^5

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Certification Summary

<!-- Position -->
MinExperiencePositionSkills_skl^1
LowExperiencePositionSkills_skl^2
MediumExperiencePositionSkills_skl^3
HighExperiencePositionSkills_skl^4
MaxExperiencePositionSkills_skl^5
</str>

Description: Set of values implemented to determine level of qualifying skill-set
of Professional by using Previous Position Summary

<!-- Standard Job Title Search Fields with Boosts -->
<str name="standard_job_title_qf">
PositionsStandardized_jt^10
DesiredPositionsStandardized_jt^500
</str>

Description: Set of methods used to map Professional desired position and standard
job title position based upon previous experience by MySQL full text index
scoring.

<!-- User Phrase Fields with Boosts -->
<str name="user_search_pf">
 _skills_^2
 _text_^2
 _std-job-titles_^2
 _act-job-titles_^2
 </str>

Description: Set of methods to map Professional desired position and standard
job title position based upon previous experience implemented by MySQL full text
index scoring.

<!-- User Search Fields with Boosts -->
<str name="user_search_qf">
_skills_
_text_
_std-job-titles_
_act-job-titles_
DesiredRate_tf
MinRate_tf
</str>

Description: Full text boost for rich text descriptions based on education
summary, previous position summary, certification summary, and profile summary.

<!-- Primary Solr EDISMAX Query against skills and job titles -->
<!-- This drives the Search for Skills and Standard Job Titles
Note: using Tie=1 on job titles to rank queries having matches with
both fields higher than just one or the other. The default handling
is disjunction maximum (Solr picks the highest of the two fields).
We want a summation of both so we use a Tie of 1.
-->
<str name="q">{!boost b=$job-title-b v=$main_q}</str>
<str name="job-title-b">
query({!edismax q.alt=*:* qf=$standard_job_title_qf ps=0 tie=1 v=$arg_std_job_title},0.001)
</str>
-<str name="main_q">
_query_:"
(

<!-- Min Skill Experience Search -->
{!edismax qf=$min_skill_exp_qf ps=1 tie=0 v=$arg_min_exp_skills} OR
<!-- Low Skill Experience Search -->
{!edismax qf=$low_skill_exp_qf ps=1 tie=0 v=$arg_low_exp_skills} OR
<!-- Medium Skill Experience Search -->
{!edismax qf=$med_skill_exp_qf ps=1 tie=0 v=$arg_med_exp_skills} OR
<!-- High Skill Experience Search -->
{!edismax qf=$high_skill_exp_qf ps=1 tie=0 v=$arg_high_exp_skills} OR
<!-- Max Skill Experience Search -->
{!edismax qf=$max_skill_exp_qf ps=1 tie=0 v=$arg_max_exp_skills}
)AND
<!-- User Query -->
{!edismax pf=$user_search_pf qf=$user_search_qf v=$arg_user_search} "
</str>

Description: Default search based upon minimum/maximum skill-set match of
Opportunity availability and experience of Professional. Skill experience is NOT
used if the Opportunity does not include an experience on the Opp Skill.

<!-- ================= Query Functions ================= -->
<!-- Location Functions -->
<str name="fx_distance_from_opp">
geodist(LocationLatLon_p, ${>:${arg_latitude}}, ${>:${arg_longitude}})
</str>
<str name="fx_pm_location">
 min(max(sub(1, div(${>:${fx_distance_from_opp}}, ${>:${arg_max_allowed_km}})), 0), 1)
 </str>

 Description: Currently the most primitive calculation in the PowerMatch stack, and
 will be rewritten once we acquire a persistence technology with built in
 (out of the box). Geospatial support (Solr or MySQL 5.7). Geospatial indexing will
 allow us to calculate the distance between to coordinates.

<!-- Rate Functions -->
<str name="fx_absolute_rate_difference">
abs(sum(${>:${arg_rate}}, product(DesiredRate_tf, -1)))
</str>
<str name="fx_pm_rate">
min(max(sub(1, div(${>:${fx_absolute_rate_difference}}, ${>:${arg_rate}})), 0), 1)
</str>

Description: Current functions needed to calculate the rate score

<!-- Availability Functions -->
<str name="fx_opp_duration">
ms($arg_end_date, $arg_start_date)
</str>
<str name="fx_pro_duration">
min(max(ms($arg_end_date, DateAvailable_dt), 0), 1)
</str>
<str name="fx_pm_availability">
min(max(div($fx_opp_duration, $fx_pro_duration), 0), 1)
</str>
</lst>

Description: Set of Functions used to sum up the availability of Professional's
start date, duration of contract, etc.

<!-- Term Vector Component -->
-<arr name="last-components">
<str>tvComponent</str>
</arr>
</requestHandler>

Description: SearchComponent designed to return findings of stored documents when
setting the "Term Vector" Component or attribute on a field.


<!-- XMS "More Like This" Search Configuration -->
-<requestHandler name="/mlt class="solr.SearchHandler">
-<lst name="defaults">

<!-- ================= Client (Default) Options ================= -->
<!-- Output Options -->
<str name="echoParams">explicit</str>
Decription: The response header can include paramaters sent with the query request. This parameter controls what is contained in that section of the response header.
Valid values are none, all, and explicit. The default value is explicit.
<str name="indent">false</str>
<int name="rows">25</int>
<str name="wt">json</str>

Description: The response header can include parameters sent with the query that
in return controls what is contained within that section of the response header.
Valid values are none, all and explicit. Default value is explicit.

<!-- Query Parameters: Job Fitness Variables -->
<str name="arg_min_exp_skills"/></str>
<str name="arg_low_exp_skills"/></str>
<str name="arg_med_exp_skills"/><str>
<str name="arg_high_exp_skills"/></str>
<str name="arg_max_exp_skills"/></str>
<str name="arg_std_job_title"/></str>

Description: Set of methods combining full text and title to measure Job Fitness.


<!-- Query Parameters: Location Variables -->
<str name="arg_latitude">0</str>
<str name="arg_longitude">0</str>
<int name="arg_max_allowed_km">80</int>

Description: Set of methods combining full text and title to measure Job Fitness.

<!-- Query Parameters: Rate Variables -->
<str name="arg_rate">0</str>

<!-- Query Parameters: Availability Variables -->
<str name="arg_start_date">1901-01-01T00:00:00Z</str>
<str name="arg_end_date">1901-01-01T00:00:00Z</str>

Description: Set of methods using Geospatial to determine DWL (Desired Work Location)


<!-- Return Fields (Like SQL SELECT fields) -->
<str name="fl"> ProfileId:id
RelevancyScore:score PowerMatchRateScore:$fx_pm_rate
PowerMatchLocationScore:$fx_pm_location
PowerMatchAvailabilityScore:$fx_pm_availability
</str>

Description: MySQL full text index using the most current calculation in the PowerMatch
stack.

<!-- More Like This Options -->
<bool name="mlt">true</bool>
<int name="mlt.count">24</int>
<str name="mlt.qf">
_skills_
_std-job-titles_^2
</str>
<str name="mlt.fl">_skills_,_std-job-titles_</str>
<str name="mlt.interestingTerms">list</str>
<bool name="mlt.boost">true</bool>
</lst>

Description: MLT queries specified to mlt.fl while notating documents with
similarities to return for each expected result.

-<lst name="appends">
<!-- Filter Options (like SQL WHERE Clause) -->
<str name="fq">IsActive_b:true</str>
<str name="fq">{!geofilt pt=${>:${arg_latitude}},${>:${arg_longitude}} sfield=LocationLatLon_p d=${>:${arg_max_allowed_km}}} </str>
</lst>

Description: SQl query implemented to restrict or assign a super set of documents
to be returned without changing or influencing the score; sole purpose of speeding
up complex queries that cache independently.

-<lst name="invariants">

<!-- ================= Query Functions ================= -->
<!-- These are all combined user search terms -->
<str name="all_search_terms">
${>:${arg_min_exp_skills}}
${>:${arg_low_exp_skills}}
${>:${arg_med_exp_skills}}
${>:${arg_high_exp_skills}}
${>:${arg_max_exp_skills}}
</str>

Description: DW1s calculations of distance threshold for Geospatial.

<!-- Location Functions -->
<str name="fx_distance_from_opp">
geodist(LocationLatLon_p, ${>:${arg_latitude}}, ${>:${arg_longitude}})
</str>
<str name="fx_pm_location"> min(max(sub(1, div(${>:${fx_distance_from_opp}}, ${>:${arg_max_allowed_km}})), 0), 1)
</str>

Description:

<!-- Rate Functions -->
<str name="fx_absolute_rate_difference">
abs(sum(${>:${arg_rate}}, product(DesiredRate_tf, -1)))
</str>
<str name="fx_pm_rate"> min(max(sub(1, div(${>:${fx_absolute_rate_difference}}, ${>:${arg_rate}})), 0), 1)
</str>

Description: Current functions implemented to calculate the rate score

<!-- Availability Functions -->
<str name="fx_opp_duration">
ms($arg_end_date, $arg_start_date)
</str>
<str name="fx_pro_duration">
min(max(ms($arg_end_date, DateAvailable_dt), 0), 1)
</str>
<str name="fx_pm_availability"> min(max(div($fx_opp_duration, $fx_pro_duration), 0), 1)
</str>
</lst>
</requestHandler>

Description: Current function implemented to calculate proration of availability,
start and duration date.

<!-- XMS User Search Configuration -->
-<requestHandler class="solr.SearchHandler" name="/user">
-<lst name="defaults">
<!-- ================= Client (Default) Options ================= -->
<!-- Output Options -->
<str name="echoParams">explicit</str>
<str name="wt">json</str>
<str name="indent">false</str>
<int name="rows">25</int>
<str name="q.alt">*:*</str>
<str name="pf">
_skills_^2
_text_^2
_std-job-titles_^2
_act-job-titles_^2
</str>
<str name="qf">
_skills_
_text_
_std-job-titles_
_act-job-titles_
DesiredRate_tf
MinRate_tf
</str>

Description: The response header can include parameters sent with the query
request. This parameter controls what is contained in that particular section
pf the response header.

<!-- Custom Search Names -->
<str name="f.Skills.qf">_skills_</str>
<str name="f.Availability.qf">DateAvailable_dt</str>
<str name="f.Titles.qf">
_std-job-titles_
_act-job-titles_
</str>
<str name="f.Rate.qf">
DesiredRate_tf
MinRate_tf
</str>

Description: Set of values that implement RealTime Get to match profile of
professional with opportunity

<!-- Hit Highlight Options -->
<bool name="hl">true</bool>
<bool name="hl.requireFieldMatch">true</bool>
<bool name="hl.useFastVectorHighlighter">true</bool>
<str name="hl.boundaryScanner">breakIterator</str>
<str name="hl.snippets">10</str>
<str name="hl.fl">
_skills_
</str>

Description: Parameters set for highlighted snippets that accepts per-field
overrides to be generated in the query response when set to "true". Default= False

<!-- Return Fields (Like SQL SELECT fields) -->
<str name="fl">
ProfileId:id
RelevancyScore:score
PowerMatchRateScore:$fx_pm_rate
PowerMatchLocationScore:$fx_pm_location
PowerMatchAvailabilityScore:$fx_pm_availability
</str>

Description: Formula that uses parameters to determine scoring selected
professional profile match with opportunity.

<!-- Query Parameters: Location Variables -->
<str name="arg_latitude">32.822124</str>
<str name="arg_longitude">-96.828394</str>
<int name="arg_max_allowed_km">80</int>
<!-- Query Parameters: Rate Variables -->
<str name="arg_rate">60
</str>

Description: Repository containing custom namespace allowing search of
instantiating of SolrServer by location

<!-- Query Parameters: Availability Variables -->
<str name="arg_start_date">1901-01-01T00:00:00Z</str>
<str name="arg_end_date">1902-01-01T00:00:00Z</str>
</lst>

Description: Sum of calculations used to determine availability of professional

-<lst name="appends">
<!-- Filter Options (like SQL WHERE Clause) -->
<str name="fq">IsActive_b:true</str>
<str name="fq">{!geofilt pt=${>:${arg_latitude}},${>:${arg_longitude}} sfield=LocationLatLon_p d=${>:${arg_max_allowed_km}}} </str>
</lst>

Description: Set of Functions computed for the result and returned
as psuedo-field

-<lst name="invariants">
<str name="defType">edismax</str>
<!-- ================= Query Functions ================= -->
<!-- Location Functions -->
<str name="fx_distance_from_opp">
geodist(LocationLatLon_p, ${>:${arg_latitude}}, ${>:${arg_longitude}})
</str>
<str name="fx_pm_location"> min(max(sub(1, div(${>:${fx_distance_from_opp}}, ${>:${arg_max_allowed_km}})), 0), 1)
</str>
Description:
<!-- Rate Functions -->
<str name="fx_absolute_rate_difference"> abs(sum(${>:${arg_rate}}, product(DesiredRate_tf, -1)))
</str>
<str name="fx_pm_rate"> min(max(sub(1, div(${>:${fx_absolute_rate_difference}}, ${>:${arg_rate}})), 0), 1)
</str>

Description:

<!-- Availability Functions -->
<str name="fx_opp_duration">
ms($arg_end_date, $arg_start_date)
</str>
<str name="fx_pro_duration">
min(max(ms($arg_end_date, DateAvailable_dt), 0), 1)
</str>
<str name="fx_pm_availability">
min(max(div($fx_opp_duration, $fx_pro_duration), 0), 1)
</str>
</lst>
</requestHandler>

Description: Formula that uses parameters to determine scoring selected professionals
profile match with available opportunity.

<!-- XMS Power Match Configuration -->
-<requestHandler class="solr.SearchHandler" name="/autocomplete/skills">
-<lst name="defaults">

Description: Configuration with multiple instances of SolrRequestHandler
providing logic for SearchComponents as long as the components are declared.

<!-- ================= Client (Default) Options ================= -->
<!-- Output Options -->
<str name="echoParams">explicit</str>
<str name="wt">json</str>
<str name="indent">true</str>
<int name="rows">25</int>

Description: Communicates output response and allows all parameters to be
implemented by the request handler configuration. Solr gives the handle used
in the response to the client for debugging purposes.


<!-- Hit Highlight Options -->
<bool name="hl">true</bool>
<str name="hl.simple.pre"/>
<str name="hl.simple.post"/>
<str name="hl.fl">_skills_</str>
Description:

<!-- Return Fields (Like SQL SELECT fields) -->
<str name="fl">id</str>
</lst>

Description: Allows turn-on of extra information when requested. However, If
"true" make "false" to prevent retrieval of unnecessary information. The
frequency of the document will return information per terms within the
document.

-<lst name="appends">
<!-- Filter Options (like SQL WHERE Clause) -->
<str name="fq">IsActive_b:true</str>
</lst>
Description:

-<lst name="invariants">
<str name="defType">edismax</str>
<str name="qf">_skills_</str>
</lst>
</requestHandler>

Description:

<!-- XMS Power Match Configuration -->
-<requestHandler class="solr.SearchHandler" name="/autocomplete/job-titles">
-<lst name="defaults">
Description:

<!-- ================= Client (Default) Options ================= -->
<!-- Output Options -->
<str name="echoParams">explicit</str>
<str name="wt">json</str>
<str name="indent">true</str>
<int name="rows">25</int>

Description:

<!-- Hit Highlight Options -->
<bool name="hl">true</bool>
<str name="hl.simple.pre"/>
<str name="hl.simple.post"/>
<str name="hl.fl">_std-job-titles_</str>

Decription:


<!-- Return Fields (Like SQL SELECT fields) -->
<str name="fl">id</str>
</lst>

Decription:

-<lst name="appends">
<!-- Filter Options (like SQL WHERE Clause) -->
<str name="fq">IsActive_b:true</str>
</lst>

Description:

-<lst name="invariants">
<str name="defType">edismax</str>
<str name="qf">_std-job-titles_</str>
</lst>
</requestHandler>

Description:

<!-- SearchHandler
http://wiki.apache.org/solr/SearchHandler

For processing Search Queries, the primary Request Handler
provided with Solr is "SearchHandler" It delegates to a sequent
of SearchComponents (see below) and supports distributed
queries across multiple shards
-->

-<requestHandler name="class="solr.SearchHandler">
<!-- default values for query parameters can be specified,
these will be overridden by parameters in the request
-->

Description:

-<lst name="defaults">
<str name="echoParams">explicit</str>
<int name="rows">10</int>
<!-- <str name="df">text</str> -->
</lst>
<!-- In addition to defaults, "appends" params can be specified to identify values which should be appended
to the list of multi-val params from the query (or the existing "defaults").
-->

Description:


<!-- In this example, the param "fq=instock:true" would be appended to any query time fq params the user may specify,
as a mechanism for partitioning the index, independent of any user selected filtering that may also be desired (perhaps as a result of faceted searching).
NOTE: there is *absolutely* nothing a client can do to prevent these "appends" values from being used, so don't use this mechanism unless you are sure you always want it.
-->
<!-- <lst name="appends">
<str name="fq">inStock:true
</str>
</lst>
-->

<!-- "invariants" are a way of letting the Solr maintainer lock down the options available to Solr clients.
Any params values specified here are used regardless of what values may be specified in either the query, the "defaults", or the "appends" params.
In this example, the facet.field and facet.query params would be fixed, limiting the facets clients can use.
Faceting is not turned on by default - but if the client does specify facet=true in the request, these are the only facets they will be able to see counts for;
regardless of what other facet.field or facet.query params they may specify.

NOTE: there is *absolutely* nothing a client can do to prevent these "invariants" values from being used,
so don't use this mechanism unless you are sure you always want it.
-->


<!--
<lst name="invariants">
<str name="facet.field">cat</str>
<str name="facet.field">manu_exact</str>
<str name="facet.query">price:[* TO 500]</str>
<str name="facet.query">price:[500 TO *]</str>
</lst>
-->

Description:


<!-- If the default list of SearchComponents is not desired,
that list can either be overridden completely, or components can be prepended or appended to the default list. (see below)
-->

Description:

<!--
<arr name="components">
<str>nameOfCustomComponent1</str>
<str>nameOfCustomComponent2</str>
</arr>
-->

Description:

</requestHandler>

<!-- A request handler that returns indented JSON by default -->
-<requestHandler class="solr.SearchHandler" name="/query">
-<lst name="defaults">
<str name="echoParams">explicit</str>
<str name="wt">json</str>
<str name="indent">true</str>
</lst>
</requestHandler>

-<requestHandler class="solr.SearchHandler" name="/browse" useParams="query,facets,velocity,browse">
-<lst name="defaults">
<str name="echoParams">explicit</str>
</lst>
</requestHandler>

-<initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
-<lst name="defaults">
<str name="df">_text_</str>
</lst>
</initParams>


-<initParams path="/update/**">
-<lst name="defaults">
<str name="update.chain">add-unknown-fields-to-the-schema</str>
</lst>
</initParams>

Description:

<!-- Solr Cell Update Request Handler

http://wiki.apache.org/solr/ExtractingRequestHandler

-->
-<requestHandler name="/update/extract"
                 startup="lazy"
                 class="solr.extraction.ExtractingRequestHandler">
-<lst name="defaults">
<str name="lowernames">true</str>
<str name="fmap.meta">ignored_</str>
<str name="fmap.content">_text_</str>
</lst>
</requestHandler>

<!-- The export request handler is used to export full sorted result sets. Do not change these defaults.
-->

-<requestHandler name="/export" class="solr.SearchHandler">
-<lst name="invariants">
<str name="rq">{!xport}</str>
<str name="wt">xsort</str>
<str name="distrib">false</str>
</lst>

-<arr name="components">
<str>query</str>
</arr>
</requestHandler>

Description:

<!-- Uncomment for distributed Stream processing.

SECURTIY WARNING: This feature uses Java Serialization for RPC (Remote Procedure Calls) to send executable Java Objects to Worker nodes.
                  Solr also currently has apache commons-collections in it's classpath. This makes Solr vulnerable to this security exploit:
                  https://issues.apache.org/jira/browse/COLLECTIONS-580.

<requestHandler name="/stream" class="solr.StreamHandler">
<lst name="invariants">
<str name="wt">json</str>
<str name="distrib">false</str>
</lst>
</requestHandler>

-->

Description:


<!-- Field Analysis Request Handler
RequestHandler that provides much the same functionality as analysis.jsp. Provides the ability to specify multiple field types and field names in the same request and outputs index-time and query-time analysis for each of them.
Request parameters are:
analysis.fieldname - field name whose analyzers are to be used
analysis.fieldtype - field type whose analyzers are to be used
analysis.fieldvalue - text for index-time analysis
q (or analysis.q) - text for query time analysis analysis.showmatch (true|false) - When set to true and when query analysis is performed,
the produced tokens of the field value analysis will be marked as "matched" for every token that is produces by the query analysis
-->


<requestHandler name="/analysis/field"
                startup="lazy"
                class="solr.FieldAnalysisRequestHandler" />

<!-- Document Analysis Handler

http://wiki.apache.org/solr/AnalysisRequestHandler

An analysis handler that provides a breakdown of the analysis process of provided documents.
This handler expects a (single) content stream with the following format:
<docs>
<doc>
<field name="id">1</field>
<field name="name">The Name</field>
<field name="text">The Text Value</field>
</doc>
<doc>...</doc>
<doc>...</doc>
...
</docs>

Note: Each document must contain a field which serves as the unique key. This key is used in the returned response to associate an analysis breakdown to the analyzed document.
Like the FieldAnalysisRequestHandler, this handler also supports query analysis by sending either an "analysis.query" or "q" request parameter that holds the query text to be analyzed.
It also supports the "analysis.showmatch" parameter which when set to true, all field tokens that match the query tokens will be marked as a "match".
-->


<requestHandler name="/analysis/document"
                class="solr.DocumentAnalysisRequestHandler"
                startup="lazy"/>

<!-- Echo the request contents back to the client -->
-<requestHandler class="solr.DumpRequestHandler" name="/debug/dump">
-<lst name="defaults">
<str name="echoParams">explicit</str>
<str name="echoHandler">true</str>
</lst>
</requestHandler>

Description:

<!-- Search Components
Search components are registered to SolrCore and used by instances of SearchHandler (which can access them by name)
By default, the following components are available:
<searchComponent name="query" class="solr.QueryComponent" />
<searchComponent name="facet" class="solr.FacetComponent" />
<searchComponent name="mlt" class="solr.MoreLikeThisComponent" />
<searchComponent name="highlight" class="solr.HighlightComponent" />
<searchComponent name="stats" class="solr.StatsComponent" />
<searchComponent name="debug" class="solr.DebugComponent" />

Description:

Default configuration in a requestHandler would look like:

<arr name="components">
<str>query</str>
<str>facet</str>
<str>mlt</str>
<str>highlight</str>
<str>stats</str>
<str>debug</str>
</arr>

Description:

If you register a searchComponent to one of the standard names, that will be used instead of the default.

To insert components before or after the 'standard' components, use:
<arr name="first-components">
<str>myFirstComponentName</str>
</arr> <arr name="last-components">
<str>myLastComponentName</str>
</arr>

Description:

NOTE: The component registered with the name "debug" will always be executed after the "last-components"
-->


<!-- Spell Check

The spell check component can return a list of alternative spelling suggestions.

http://wiki.apache.org/solr/SpellCheckComponent
-->
-<searchComponent name="spellcheck" class="solr.SpellCheckComponent">

<str name="queryAnalyzerFieldType">text_general</str>

<!-- Multiple "Spell Checkers" can be declared and used by this component
-->


<!-- a spellchecker built from a field of the main index -->
-<lst name="spellchecker">
<str name="name">default</str>
<str name="field">_text_</str>
<str name="classname">solr.DirectSolrSpellChecker</str>
<!-- the spellcheck distance measure used, the default is the internal levenshtein -->
<str name="distanceMeasure">internal</str>
<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
<float name="accuracy">0.5</float>
<!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
<int name="maxEdits">2</int>
<!-- the minimum shared prefix when enumerating terms -->
<int name="minPrefix">1</int>
<!-- maximum number of inspections per result. -->
<int name="maxInspections">5</int>
<!-- minimum length of a query term to be considered for correction -->
<int name="minQueryLength">4</int>
<!-- maximum threshold of documents a query term can appear to be considered for correction -->
<float name="maxQueryFrequency">0.01</float>
<!-- uncomment this to require suggestions to occur in 1% of the documents <float name="thresholdTokenFrequency">.01</float>
-->

Description:
Enumerates all terms in a field, calculating the set intersection of documents that match the term with documents that match the query.
The facet counts are calculated by iterating over documents that match the query and summing the terms that appear in each document.

</lst>

<!-- a spellchecker that can break or combine words. See "/spell" handler below for usage -->
<!--
<lst name="spellchecker">
<str name="name">wordbreak</str>
<str name="classname">solr.WordBreakSolrSpellChecker</str>
<str name="field">name</str>
<str name="combineWords">true</str>
<str name="breakWords">true</str>
<int name="maxChanges">10</int>
</lst>
-->

Decription:

</searchComponent>

<!-- A request handler for demonstrating the spellcheck component.
NOTE: This is purely as an example. The whole purpose of the SpellCheckComponent is to hook it into the request handler that handles your normal user queries so that a separate request is not needed to get suggestions. I
N OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!
See http://wiki.apache.org/solr/SpellCheckComponent for details on the request parameters.
 -->

-<requestHandler class="solr.SearchHandler" name="/spell" startup="lazy">
-<lst name="defaults">
<!-- Solr will use suggestions from both the 'default' spellchecker and from the 'wordbreak' spellchecker and combine them.
Collations (re-written queries) can include a combination of corrections from both spellcheckers -->
<str name="spellcheck.dictionary">default</str>
<str name="spellcheck">on</str>
<str name="spellcheck.extendedResults">true</str>
<str name="spellcheck.count">10</str>
<str name="spellcheck.alternativeTermCount">5</str>
<str name="spellcheck.maxResultsForSuggest">5</str>
<str name="spellcheck.collate">true</str>
<str name="spellcheck.collateExtendedResults">true</str>
<str name="spellcheck.maxCollationTries">10</str>
<str name="spellcheck.maxCollations">5</str>
</lst>
-<arr name="last-components">
<str>spellcheck</str>
</arr>
</requestHandler>

Description:


<!-- Term Vector Component
http://wiki.apache.org/solr/TermVectorComponent
-->
<searchComponent class="org.apache.solr.handler.component.TermVectorComponent" name="tvComponent"/>

<!-- A request handler for demonstrating the term vector component This is purely as an example. In reality you will likely want to add the component to your already specified request handlers.
-->

Decription:

-<requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
-<lst name="defaults">
<bool name="tv">true</bool>
</lst>
-<arr name="last-components">
<str>tvComponent</str>
</arr>
</requestHandler>

Decription:

<!-- Clustering Component. (Omitted here. See the default Solr example for a typical configuration.) -->


<!-- Terms Component
http://wiki.apache.org/solr/TermsComponent

A component to return terms and document frequency of those terms
-->
<searchComponent class="solr.TermsComponent" name="terms"/>
<!-- A request handler for demonstrating the terms component -->
-<requestHandler class="solr.SearchHandler" name="/terms" startup="lazy">
-<lst name="defaults">
<bool name="terms">true</bool>
<bool name="distrib">false</bool>
</lst>
-<arr name="components">
<str>terms</str>
</arr>
</requestHandler>

Decription:

<!-- Query Elevation Component
http://wiki.apache.org/solr/QueryElevationComponent
A search component that enables you to configure the top results for a given query regardless of the normal lucene scoring.
-->

Description:

-<searchComponent name="elevator" class="solr.QueryElevationComponent" >
<!-- pick a fieldType to analyze queries -->
<str name="queryFieldType">string</str>
<str name="config-file">elevate.xml</str>
</searchComponent>

<!-- A request handler for demonstrating the elevator component -->
-<requestHandler class="solr.SearchHandler" name="/elevate" startup="lazy">
-<lst name="defaults">
<str name="echoParams">explicit</str>
</lst>
-<arr name="last-components">
<str>elevator</str>
</arr>
</requestHandler>

Description:

<!-- Highlighting Component
http://wiki.apache.org/solr/HighlightingParameters
-->

-<searchComponent class="solr.HighlightComponent" name="highlight">
-<highlighting>

<!-- Configure the standard fragmenter -->
<!-- This could most likely be commented out in the "default" case -->
-<fragmenter name="gap"
             default="true">
             class="solr.highlight.GapFragmenter"
-<lst name="defaults">
<int name="hl.fragsize">100</int>
</lst>
</fragmenter>
<!-- A regular-expression-based fragmenter (for sentence extraction)
-->

Description:

-<fragmenter name="regex"
             class="solr.highlight.RegexFragmenter">
-<lst name="defaults">
<!-- slightly smaller fragsizes work better because of slop -->
<int name="hl.fragsize">70</int>
<!-- allow 50% slop on fragment sizes -->
<float name="hl.regex.slop">0.5</float>
<!-- a basic sentence pattern -->
<str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
</lst>
</fragmenter>

Description:

<!-- Configure the standard formatter -->

-<formatter name="html"
            default="true"
            class="solr.highlight.HtmlFormatter" >
-<lst name="defaults">
-<str name="hl.simple.pre"><![CDATA[<em>]]></str>
</str> name="hl.simple.post"><![CDATA[</em>]]></str>
</lst>
</formatter>

Decription:

<!-- Configure the standard encoder -->

<encoder name="html"
        class="solr.highlight.HtmlEncoder"  />

<!-- Configure the standard fragListBuilder -->
<fragListBuilder name="simple"
                 class="solr.highlight.SimpleFragListBuilder" />

<!-- Configure the single fragListBuilder -->

<fragListBuilder name="single"
                 class="solr.highlight.SingleFragListBuilder" />

<!-- Configure the weighted fragListBuilder -->


<fragListBuilder name="weighted"
                 default="true"
                 class="solr.highlight.WeightedFragListBuilder" />

<!-- default tag FragmentsBuilder -->


-<fragmentsBuilder name="default"
                   default="true"
                   class="solr.highlight.ScoreOrderFragmentsBuilder" >

<!-- <lst name="defaults">
<str name="hl.multiValuedSeparatorChar">/</str>
</lst>
-->

Description:

</fragmentsBuilder>

<!-- multi-colored tag FragmentsBuilder -->
-<fragmentsBuilder name="colored"
                   class="solr.highlight.ScoreOrderFragmentsBuilder" >
-<lst name="defaults">
-<str name="hl.tag.pre"><![CDATA[

      <b style="background:yellow">,<b style="background:lawgreen">,
      <b style="background:aquamarine">,<b style="background:magenta">,
      <b style="background:palegreen">,<b style="background:coral">,
      <b style="background:wheat">,<b style="background:khaki">,
      <b style="background:lime">,<b style="background:deepskyblue">]]></str>
<str name="hl.tag.post"><![CDATA[</b>]]></str>
</lst>
</fragmentsBuilder>
-<boundaryScanner name="default"
                  default="true"
                  class="solr.highlight.SimpleBoundaryScanner" >

-<lst name="defaults">
<str name="hl.bs.maxScan">10</str>
<str name="hl.bs.chars">.,!? </str>
</lst>
</boundaryScanner>

-<boundaryScanner name="breakIterator"
                  class="solr.highlight.BreakIteratorBoundaryScanner" name="breakIterator">
-<lst name="defaults">
<!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
<str name="hl.bs.type">WORD</str>
<!-- language and country are used when constructing Locale object. -->
<!-- And the Locale object will be used when getting instance of BreakIterator -->
<str name="hl.bs.language">en</str>
<str name="hl.bs.country">US</str>
</lst>
</boundaryScanner>
</highlighting>
</searchComponent>

Description:

<!-- Update Processors Chains of Update Processor Factories for dealing with Update Requests can be declared, and then used by name in Update Request Processors.

http://wiki.apache.org/solr/UpdateRequestProcessor
-->


<!-- Add unknown fields to the schema An example field type guessing update processor that will attempt to parse string-typed field values as Booleans, Longs, Doubles, or Dates, and then add schema fields with the guessed field types.
This requires that the schema is both managed and mutable, by declaring schemaFactory as ManagedIndexSchemaFactory, with mutable specified as true.

See http://wiki.apache.org/solr/GuessingFieldTypes
-->

-<updateRequestProcessorChain name="add-unknown-fields-to-the-schema">
<!-- UUIDUpdateProcessorFactory will generate an id if none is present in the incoming document -->
<processor class="solr.UUIDUpdateProcessorFactory"/>
<processor class="solr.LogUpdateProcessorFactory"/>
<processor class="solr.DistributedUpdateProcessorFactory"/>
<!-- XMS - Trim All Input -->
<processor class="TrimFieldUpdateProcessorFactory"/>
<processor class="solr.RemoveBlankFieldUpdateProcessorFactory"/>
-<processor class="solr.FieldNameMutatingUpdateProcessorFactory">
<str name="pattern">[^\w-\.]</str>
<str name="replacement">_</str>
</processor>
<processor class="solr.ParseBooleanFieldUpdateProcessorFactory"/>
<processor class="solr.ParseLongFieldUpdateProcessorFactory"/>
<processor class="solr.ParseDoubleFieldUpdateProcessorFactory"/>
-<processor class="solr.ParseDateFieldUpdateProcessorFactory">
-<arr name="format">
<str>yyyy-MM-dd'T'HH:mm:ss.SSSZ</str>
<str>yyyy-MM-dd'T'HH:mm:ss,SSSZ</str>
<str>yyyy-MM-dd'T'HH:mm:ss.SSS</str>
<str>yyyy-MM-dd'T'HH:mm:ss,SSS</str>
<str>yyyy-MM-dd'T'HH:mm:ssZ</str>
<str>yyyy-MM-dd'T'HH:mm:ss</str>
<str>yyyy-MM-dd'T'HH:mmZ</str>
<str>yyyy-MM-dd'T'HH:mm</str>
<str>yyyy-MM-dd HH:mm:ss.SSSZ</str>
<str>yyyy-MM-dd HH:mm:ss,SSSZ</str>
<str>yyyy-MM-dd HH:mm:ss.SSS</str>
<str>yyyy-MM-dd HH:mm:ss,SSS</str>
<str>yyyy-MM-dd HH:mm:ssZ</str>
<str>yyyy-MM-dd HH:mm:ss</str>
<str>yyyy-MM-dd HH:mmZ</str>
<str>yyyy-MM-dd HH:mm</str>
<str>yyyy-MM-dd</str>
</arr>
</processor>
-<processor class="solr.AddSchemaFieldsUpdateProcessorFactory">
<str name="defaultFieldType">strings</str>
-<lst name="typeMapping">
<str name="valueClass">java.lang.Boolean</str>
<str name="fieldType">booleans</str>
</lst>
-<lst name="typeMapping">
<str name="valueClass">java.util.Date</str>
<str name="fieldType">tdates</str>
</lst>
-<lst name="typeMapping">
<str name="valueClass">java.lang.Long</str>
<str name="valueClass">java.lang.Integer</str>
<str name="fieldType">tlongs</str>
</lst>
-<lst name="typeMapping">
<str name="valueClass">java.lang.Number</str>
<str name="fieldType">tdoubles</str>
</lst>
</processor>

Description:

<!-- XMS - Remove Dupes -->
-<processor class="org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory">
<str name="fieldRegex">.*_jt</str>
<str name="fieldRegex">.*_skl</str>
<str name="fieldRegex">_skills_</str>
<str name="fieldRegex">_skills-original_</str>
<str name="fieldRegex">_std-job-titles_</str>
<str name="fieldRegex">_std-job-titles-original_</str>
<str name="fieldRegex">_act-job-titles_</str>
<str name="fieldRegex">_act-job-titles-original_</str>
</processor>
<processor class="solr.RunUpdateProcessorFactory"/>

<processor class="solr.RunUpdateProcessorFactory"/>
</updateRequestProcessorChain>

Description:

<!-- Deduplication
An example dedup update processor that creates the "id" field on the fly based on the hash code of some other fields.
This example has overwriteDupes set to false since we are using the id field as the signatureField and Solr will maintain uniqueness based on that anyway.

-->


<!-- <updateRequestProcessorChain name="dedupe">
<processor class="solr.processor.SignatureUpdateProcessorFactory">
<bool name="enabled">true</bool>
<str name="signatureField">id</str>
<bool name="overwriteDupes">false</bool>
<str name="fields">name,features,cat</str>
<str name="signatureClass">solr.processor.Lookup3Signature</str>
</processor> <processor class="solr.LogUpdateProcessorFactory" />
<processor class="solr.RunUpdateProcessorFactory" /> </updateRequestProcessorChain>
-->

Decription:

<!-- Language identification
This example update chain identifies the language of the incoming documents using the langid contrib.
The detected language is written to field language_s. No field name mapping is done.
The fields used for detection are text, title, subject and description, making this example suitable for detecting languages form full-text rich documents injected via ExtractingRequestHandler.
See more about langId at http://wiki.apache.org/solr/LanguageDetection
-->

Description:

<!-- <updateRequestProcessorChain name="langid">
<processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
<str name="langid.fl">text,title,subject,description</str>
<str name="langid.langField">language_s</str>
<str name="langid.fallback">en</str>
</processor>
<processor class="solr.LogUpdateProcessorFactory" />
<processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>
-->

Description:


<!-- Script update processor

This example hooks in an update processor implemented using JavaScript.
See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor
-->


<!--
<updateRequestProcessorChain name="script">
<processor class="solr.StatelessScriptUpdateProcessorFactory">
<str name="script">update-script.js</str>
 <lst name="params">
 <str name="config_param">example config parameter</str>
 </lst>
 </processor>
 <processor class="solr.RunUpdateProcessorFactory" />
 </updateRequestProcessorChain>
 -->

 Decription:

<!-- Response Writers

http://wiki.apache.org/solr/QueryResponseWriter

Request responses will be written using the writer specified by the 'wt' request parameter matching the name of a registered writer.
The "default" writer is the default and will be used if 'wt' is not specified in the request.
 -->


<!-- The following response writers are implicitly configured unless overridden...
-->


<!--
<queryResponseWriter name="xml"
                     default="true"
                     class="solr.XMLResponseWriter" />
<queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
<queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
<queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
<queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
<queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
<queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
<queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
-->

Decription:


-<queryResponseWriter class="solr.JSONResponseWriter" name="json">

<!-- For the purposes of the tutorial, JSON responses are written as plain text so that they are easy to read in *any* browser.
If you expect a MIME type of "application/json" just remove this override.
-->

Decription:

<str name="content-type">text/plain; charset=UTF-8</str>
</queryResponseWriter>

<!--
Custom response writers can be declared as needed...
-->
-<queryResponseWriter class="solr.VelocityResponseWriter" name="velocity" startup="lazy">
<str name="template.base.dir">${velocity.template.base.dir:}</str>
<str name="solr.resource.loader.enabled">${velocity.solr.resource.loader.enabled:true}</str>
<str name="params.resource.loader.enabled">${velocity.params.resource.loader.enabled:false}</str>
</queryResponseWriter>

Decription:

<!-- XSLT response writer transforms the XML output by any xslt file found in Solr's conf/xslt directory.
Changes to xslt files are checked for every xsltCacheLifetimeSeconds.
-->
-<queryResponseWriter class="solr.XSLTResponseWriter" name="xslt">
<int name="xsltCacheLifetimeSeconds">5</int>
</queryResponseWriter>

Decription:

<!-- Query Parsers
http://wiki.apache.org/solr/SolrQuerySyntax
Multiple QParserPlugins can be registered by name, and then used in either the "defType" param for the QueryComponent (used by SearchHandler) or in LocalParams
-->


<!-- example of registering a query parser -->
<!--
<queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
-->


<!-- Function Parsers
 http://wiki.apache.org/solr/FunctionQuery

 Multiple ValueSourceParsers can be registered by name, and then used as function names when using the "func" QParser.
 -->


<!-- example of registering a custom function parser -->
<!--
<valueSourceParser name="myfunc" class="com.mycompany.MyValueSourceParser" />
-->

Description:


<!-- Document Transformers
http://wiki.apache.org/solr/DocTransformers
-->


<!-- Could be something like:
<transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
<int name="connection">jdbc://....</int>
</transformer>

To add a constant value to all docs, use:
<transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
<int name="value">5</int>
</transformer>

Description:

If you want the user to still be able to change it with _value:something_ use this:
<transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
 <double name="defaultValue">5</double>
 </transformer>

 Description:

 If you are using the QueryElevationComponent, you may wish to mark documents that get boosted. The EditorialMarkerFactory will do exactly that:
 <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
 -->

 Description:


<!-- Legacy config for the admin interface -->
-<admin>
<defaultQuery>*:*</defaultQuery>
</admin>
</config>
